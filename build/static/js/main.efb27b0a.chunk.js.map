{"version":3,"sources":["Contact.js","Form.js","ServerCall.js","App.js","serviceWorker.js","index.js"],"names":["Contact","name","phone","id","removeFunction","onClick","value","Form","updateFunction","useState","newName","setNewName","newPhone","setNewPhone","onChange","event","target","type","preventDefault","baseUrl","getAll","axios","get","then","response","data","App","persons","setPersons","notification","setNotification","useEffect","allPersons","removeContact","delete","className","newObject","existed","find","element","number","window","confirm","put","datas","copy","post","create","newData","push","setTimeout","map","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efb27b0a.chunk.js","sourcesContent":["import React from 'react'\nconst Contact = ({name,phone, id, removeFunction}) => {\n    \n    return(<div id={id}>{name} {phone} <button onClick={removeFunction} value={id}>Delete</button></div>);\n}\n\nexport default Contact;","import React, { useState } from 'react'\nconst Form = ({updateFunction}) => {\n    const [ newName, setNewName ] = useState('')\n    const [ newPhone, setNewPhone ] = useState('')\n\n    const updateName = (event)=>{\n        setNewName(event.target.value);\n    }\n    const updatePhone = (event)=>{\n        setNewPhone(event.target.value);\n    }\n    const submitPhoneNumber=(event)=>{\n        event.preventDefault();\n        updateFunction(newName, newPhone);\n            // if successfully added all fields will be gone\n        setNewName(\"\");\n        setNewPhone(\"\");    \n    }\n    return(<form>\n        <div>\n          name: <input value={newName} onChange={updateName}/>\n        </div>\n        <div>\n          Phone: <input value={newPhone} onChange={updatePhone}/>\n        </div>\n        <div>\n          <button type=\"submit\" onClick={submitPhoneNumber}>add</button>\n        </div>\n      </form>);\n}\n\nexport default Form;","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n  }\n\nexport { getAll, create, update , remove}","import React, { useState, useEffect} from 'react'\nimport Contact from './Contact';\nimport Form from './Form';\nimport './App.css';\nimport { getAll, create, update , remove} from './ServerCall';\nconst App = () => {\n  const [ persons, setPersons] = useState([]) ;\n  const [notification, setNotification] = useState(\"\");\n  useEffect(()=>{\n    getAll().then(allPersons => {setPersons(allPersons)})\n  }, []);\n  const seeIfPersonExist=(name) =>{\n    return persons.find((element)=>{\n       return element.name === name;\n    });\n  };\n  const removeContact = (event)=> {\n    event.preventDefault();\n    remove(event.target.value).then(()=> {;\n    getAll().then(allPersons => {setPersons(allPersons)})});\n  }\n  const updatePhonebook = (newName, newPhone)=>{\n    let existed = seeIfPersonExist(newName);\n    let data = {name:newName, number:newPhone};\n    if(existed){\n      let replace = window.confirm(\"Do you want to replace an existing number?\");\n      if(replace){\n        update(existed.id, data).then(() => {getAll().then(datas =>setPersons(datas))})\n      }\n    }\n    else{\n      let copy = [...persons];\n      create(data).then(newData => {copy.push(newData); setPersons(copy)}).then(\n        ()=>{\n          setNotification(`Added ${newName} to contacts`)\n          setTimeout(()=>{\n            setNotification(\"\");\n\n          }, 5000);\n        }\n      );\n    }\n  }\n  const createListOfContacts = ()=>{\n    let allPersons = persons.map((element)=>{ return (<Contact id={element.id} key={element.id} name={element.name} \n      removeFunction={removeContact}\n      phone={element.number}/>)});\n    return allPersons;\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {notification && \n      <div className=\"notification\">\n        {notification}\n      </div>}\n        <Form updateFunction={updatePhonebook}/>\n      <h2>Numbers</h2>\n      <div>{createListOfContacts()}</div>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}